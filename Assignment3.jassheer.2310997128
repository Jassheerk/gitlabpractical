#include <iostream>
using namespace std;

class TickTacToe {
private:
    char matrix[3][3];
    char currentPlayer;
    bool gameEnd;
    int movesLeft;

public:
    TickTacToe() {
        // Initialize the matrix with empty cells
        for (int i = 0; i < 3; ++i) {
            for (int j = 0; j < 3; ++j) {
                matrix[i][j] = '-';
            }
        }
        currentPlayer = '0'; // Player one starts with '0'
        gameEnd = false;
        movesLeft = 9; // Total number of cells in the tic-tac-toe grid
    }

    void displayBoard() {
        cout << "  0 1 2" << endl;
        for (int i = 0; i < 3; ++i) {
            cout << i << " ";
            for (int j = 0; j < 3; ++j) {
                cout << matrix[i][j] << " ";
            }
            cout << endl;
        }
    }

    bool isValidMove(int row, int col) {
        // Check if the cell is within the bounds of the board and if it's empty
        return (row >= 0 && row < 3 && col >= 0 && col < 3 && matrix[row][col] == '-');
    }

    bool checkWin() {
        // Check rows
        for (int i = 0; i < 3; ++i) {
            if (matrix[i][0] != '-' && matrix[i][0] == matrix[i][1] && matrix[i][1] == matrix[i][2]) {
                return true;
            }
        }
        // Check columns
        for (int j = 0; j < 3; ++j) {
            if (matrix[0][j] != '-' && matrix[0][j] == matrix[1][j] && matrix[1][j] == matrix[2][j]) {
                return true;
            }
        }
        // Check diagonals
        if (matrix[0][0] != '-' && matrix[0][0] == matrix[1][1] && matrix[1][1] == matrix[2][2]) {
            return true;
        }
        if (matrix[0][2] != '-' && matrix[0][2] == matrix[1][1] && matrix[1][1] == matrix[2][0]) {
            return true;
        }
        return false;
    }

    void switchPlayer() {
        // Switch the current player for the next move
        currentPlayer = (currentPlayer == '0') ? 'X' : '0';
    }

    void play() {
        while (!gameEnd && movesLeft > 0) {
            displayBoard();

            // Input row and column from the current player
            int row, col;
            cout << "Player " << currentPlayer << "'s turn. Enter row and column (0-2): ";
            cin >> row >> col;

            if (isValidMove(row, col)) {
                matrix[row][col] = currentPlayer;
                movesLeft--;

                if (checkWin()) {
                    displayBoard();
                    cout << "Player " << currentPlayer << " wins!" << endl;
                    gameEnd = true;
                } else {
                    switchPlayer();
                }
            } else {
                cout << "Invalid move! Please try again." << endl;
            }
        }

        if (!gameEnd) {
            displayBoard();
            cout << "It's a draw!" << endl;
        }
    }
};

int main() {
    TickTacToe game;
    game.play();
    return 0;
}
